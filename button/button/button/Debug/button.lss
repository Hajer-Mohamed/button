
button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000004c6  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000c90  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b8  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b3  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001c70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b3  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000049b  00000000  00000000  00001f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#define F_CPU 8000000UL      don't use delay 
#include "button.h"
#include "LED.h"
int main(void)
{
	button_init('D',0);
  92:	84 e4       	ldi	r24, 0x44	; 68
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	0e 94 6e 00 	call	0xdc	; 0xdc <button_init>
	led_init('D',1);
  9a:	84 e4       	ldi	r24, 0x44	; 68
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	0e 94 4f 02 	call	0x49e	; 0x49e <led_init>
    while(1)
    {
        if(button_read('D',0)==1)
  a2:	84 e4       	ldi	r24, 0x44	; 68
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	0e 94 72 00 	call	0xe4	; 0xe4 <button_read>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	69 f4       	brne	.+26     	; 0xc8 <main+0x36>
		{
			led_toggle('D',1);	
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e7       	ldi	r24, 0x7F	; 127
  b8:	9a e1       	ldi	r25, 0x1A	; 26
  ba:	a6 e0       	ldi	r26, 0x06	; 6
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	a0 40       	sbci	r26, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x34>
  c6:	00 00       	nop
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9d e0       	ldi	r25, 0x0D	; 13
  cc:	a3 e0       	ldi	r26, 0x03	; 3
  ce:	81 50       	subi	r24, 0x01	; 1
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	a0 40       	sbci	r26, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x46>
  d8:	00 00       	nop
  da:	e3 cf       	rjmp	.-58     	; 0xa2 <main+0x10>

000000dc <button_init>:


#include "DIO.h"
void button_init(char port,char pin)
{
	set_pin_dir(port,pin,0); //input device 
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	0e 94 75 00 	call	0xea	; 0xea <set_pin_dir>
}
  e2:	08 95       	ret

000000e4 <button_read>:
char button_read(char port , char pin)
{
	return DIO_read(port,pin);
  e4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_read>
  e8:	08 95       	ret

000000ea <set_pin_dir>:
 */ 
#include<avr/io.h>
#include "std_macros.h"
void set_pin_dir(char port ,char pin,char dir)
{
	switch(port)
  ea:	84 34       	cpi	r24, 0x44	; 68
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_pin_dir+0x6>
  ee:	71 c0       	rjmp	.+226    	; 0x1d2 <set_pin_dir+0xe8>
  f0:	85 34       	cpi	r24, 0x45	; 69
  f2:	48 f4       	brcc	.+18     	; 0x106 <set_pin_dir+0x1c>
  f4:	82 34       	cpi	r24, 0x42	; 66
  f6:	99 f1       	breq	.+102    	; 0x15e <set_pin_dir+0x74>
  f8:	83 34       	cpi	r24, 0x43	; 67
  fa:	08 f0       	brcs	.+2      	; 0xfe <set_pin_dir+0x14>
  fc:	4d c0       	rjmp	.+154    	; 0x198 <set_pin_dir+0xae>
  fe:	81 34       	cpi	r24, 0x41	; 65
 100:	09 f0       	breq	.+2      	; 0x104 <set_pin_dir+0x1a>
 102:	83 c0       	rjmp	.+262    	; 0x20a <set_pin_dir+0x120>
 104:	0f c0       	rjmp	.+30     	; 0x124 <set_pin_dir+0x3a>
 106:	82 36       	cpi	r24, 0x62	; 98
 108:	51 f1       	breq	.+84     	; 0x15e <set_pin_dir+0x74>
 10a:	83 36       	cpi	r24, 0x63	; 99
 10c:	20 f4       	brcc	.+8      	; 0x116 <set_pin_dir+0x2c>
 10e:	81 36       	cpi	r24, 0x61	; 97
 110:	09 f0       	breq	.+2      	; 0x114 <set_pin_dir+0x2a>
 112:	7b c0       	rjmp	.+246    	; 0x20a <set_pin_dir+0x120>
 114:	07 c0       	rjmp	.+14     	; 0x124 <set_pin_dir+0x3a>
 116:	83 36       	cpi	r24, 0x63	; 99
 118:	09 f4       	brne	.+2      	; 0x11c <set_pin_dir+0x32>
 11a:	3e c0       	rjmp	.+124    	; 0x198 <set_pin_dir+0xae>
 11c:	84 36       	cpi	r24, 0x64	; 100
 11e:	09 f0       	breq	.+2      	; 0x122 <set_pin_dir+0x38>
 120:	74 c0       	rjmp	.+232    	; 0x20a <set_pin_dir+0x120>
 122:	57 c0       	rjmp	.+174    	; 0x1d2 <set_pin_dir+0xe8>
	{	
		case 'a':
		case 'A':
		if(dir==1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <set_pin_dir+0x58>
		{
			SET_BIT(DDRA,pin);
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <set_pin_dir+0x4c>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <set_pin_dir+0x48>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	6a bb       	out	0x1a, r22	; 26
 140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin);
 142:	2a b3       	in	r18, 0x1a	; 26
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <set_pin_dir+0x66>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <set_pin_dir+0x62>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	6a bb       	out	0x1a, r22	; 26
 15c:	08 95       	ret
		}
       break;

		case 'b':
		case 'B':
		if(dir==1)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <set_pin_dir+0x92>
		{
			SET_BIT(DDRB,pin);
 162:	27 b3       	in	r18, 0x17	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <set_pin_dir+0x86>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <set_pin_dir+0x82>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	67 bb       	out	0x17, r22	; 23
 17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
 17c:	27 b3       	in	r18, 0x17	; 23
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <set_pin_dir+0xa0>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <set_pin_dir+0x9c>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	67 bb       	out	0x17, r22	; 23
 196:	08 95       	ret
		}
		break;

	   case 'C':
	   case 'c':
	   if(dir==1)
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	69 f4       	brne	.+26     	; 0x1b6 <set_pin_dir+0xcc>
	   {
		   SET_BIT(DDRC,pin);
 19c:	24 b3       	in	r18, 0x14	; 20
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	ac 01       	movw	r20, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <set_pin_dir+0xc0>
 1a6:	44 0f       	add	r20, r20
 1a8:	55 1f       	adc	r21, r21
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <set_pin_dir+0xbc>
 1ae:	ba 01       	movw	r22, r20
 1b0:	62 2b       	or	r22, r18
 1b2:	64 bb       	out	0x14, r22	; 20
 1b4:	08 95       	ret
	   }
	   else
	   {
		   CLR_BIT(DDRC,pin);
 1b6:	24 b3       	in	r18, 0x14	; 20
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	ac 01       	movw	r20, r24
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <set_pin_dir+0xda>
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <set_pin_dir+0xd6>
 1c8:	ba 01       	movw	r22, r20
 1ca:	60 95       	com	r22
 1cc:	62 23       	and	r22, r18
 1ce:	64 bb       	out	0x14, r22	; 20
 1d0:	08 95       	ret
	   }
	   break;

      case 'd':
      case 'D':
      if(dir==1)
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	69 f4       	brne	.+26     	; 0x1f0 <set_pin_dir+0x106>
      {
	      SET_BIT(DDRD,pin);
 1d6:	21 b3       	in	r18, 0x11	; 17
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	ac 01       	movw	r20, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <set_pin_dir+0xfa>
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <set_pin_dir+0xf6>
 1e8:	ba 01       	movw	r22, r20
 1ea:	62 2b       	or	r22, r18
 1ec:	61 bb       	out	0x11, r22	; 17
 1ee:	08 95       	ret
      }
      else
      {
	      CLR_BIT(DDRD,pin);
 1f0:	21 b3       	in	r18, 0x11	; 17
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	ac 01       	movw	r20, r24
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_pin_dir+0x114>
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <set_pin_dir+0x110>
 202:	ba 01       	movw	r22, r20
 204:	60 95       	com	r22
 206:	62 23       	and	r22, r18
 208:	61 bb       	out	0x11, r22	; 17
 20a:	08 95       	ret

0000020c <DIO_write>:
	}
}

void DIO_write(char port,char pin ,char val)
{
	switch(port)
 20c:	84 34       	cpi	r24, 0x44	; 68
 20e:	09 f4       	brne	.+2      	; 0x212 <DIO_write+0x6>
 210:	71 c0       	rjmp	.+226    	; 0x2f4 <DIO_write+0xe8>
 212:	85 34       	cpi	r24, 0x45	; 69
 214:	48 f4       	brcc	.+18     	; 0x228 <DIO_write+0x1c>
 216:	82 34       	cpi	r24, 0x42	; 66
 218:	99 f1       	breq	.+102    	; 0x280 <DIO_write+0x74>
 21a:	83 34       	cpi	r24, 0x43	; 67
 21c:	08 f0       	brcs	.+2      	; 0x220 <DIO_write+0x14>
 21e:	4d c0       	rjmp	.+154    	; 0x2ba <DIO_write+0xae>
 220:	81 34       	cpi	r24, 0x41	; 65
 222:	09 f0       	breq	.+2      	; 0x226 <DIO_write+0x1a>
 224:	83 c0       	rjmp	.+262    	; 0x32c <DIO_write+0x120>
 226:	0f c0       	rjmp	.+30     	; 0x246 <DIO_write+0x3a>
 228:	82 36       	cpi	r24, 0x62	; 98
 22a:	51 f1       	breq	.+84     	; 0x280 <DIO_write+0x74>
 22c:	83 36       	cpi	r24, 0x63	; 99
 22e:	20 f4       	brcc	.+8      	; 0x238 <DIO_write+0x2c>
 230:	81 36       	cpi	r24, 0x61	; 97
 232:	09 f0       	breq	.+2      	; 0x236 <DIO_write+0x2a>
 234:	7b c0       	rjmp	.+246    	; 0x32c <DIO_write+0x120>
 236:	07 c0       	rjmp	.+14     	; 0x246 <DIO_write+0x3a>
 238:	83 36       	cpi	r24, 0x63	; 99
 23a:	09 f4       	brne	.+2      	; 0x23e <DIO_write+0x32>
 23c:	3e c0       	rjmp	.+124    	; 0x2ba <DIO_write+0xae>
 23e:	84 36       	cpi	r24, 0x64	; 100
 240:	09 f0       	breq	.+2      	; 0x244 <DIO_write+0x38>
 242:	74 c0       	rjmp	.+232    	; 0x32c <DIO_write+0x120>
 244:	57 c0       	rjmp	.+174    	; 0x2f4 <DIO_write+0xe8>
	{
		case 'a':
		case 'A':
		if(val==1)
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	69 f4       	brne	.+26     	; 0x264 <DIO_write+0x58>
		{
			SET_BIT(PORTA,pin);
 24a:	2b b3       	in	r18, 0x1b	; 27
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ac 01       	movw	r20, r24
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_write+0x4c>
 254:	44 0f       	add	r20, r20
 256:	55 1f       	adc	r21, r21
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_write+0x48>
 25c:	ba 01       	movw	r22, r20
 25e:	62 2b       	or	r22, r18
 260:	6b bb       	out	0x1b, r22	; 27
 262:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	ac 01       	movw	r20, r24
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_write+0x66>
 26e:	44 0f       	add	r20, r20
 270:	55 1f       	adc	r21, r21
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_write+0x62>
 276:	ba 01       	movw	r22, r20
 278:	60 95       	com	r22
 27a:	62 23       	and	r22, r18
 27c:	6b bb       	out	0x1b, r22	; 27
 27e:	08 95       	ret
		}
		break;

		case 'b':
		case 'B':
		if(val==1)
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	69 f4       	brne	.+26     	; 0x29e <DIO_write+0x92>
		{
			SET_BIT(PORTB,pin);
 284:	28 b3       	in	r18, 0x18	; 24
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	ac 01       	movw	r20, r24
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_write+0x86>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_write+0x82>
 296:	ba 01       	movw	r22, r20
 298:	62 2b       	or	r22, r18
 29a:	68 bb       	out	0x18, r22	; 24
 29c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 29e:	28 b3       	in	r18, 0x18	; 24
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	ac 01       	movw	r20, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_write+0xa0>
 2a8:	44 0f       	add	r20, r20
 2aa:	55 1f       	adc	r21, r21
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_write+0x9c>
 2b0:	ba 01       	movw	r22, r20
 2b2:	60 95       	com	r22
 2b4:	62 23       	and	r22, r18
 2b6:	68 bb       	out	0x18, r22	; 24
 2b8:	08 95       	ret
		}
		break;

		case 'C':
		case 'c':
		if(val==1)
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	69 f4       	brne	.+26     	; 0x2d8 <DIO_write+0xcc>
		{
			SET_BIT(PORTC,pin);
 2be:	25 b3       	in	r18, 0x15	; 21
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	ac 01       	movw	r20, r24
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_write+0xc0>
 2c8:	44 0f       	add	r20, r20
 2ca:	55 1f       	adc	r21, r21
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_write+0xbc>
 2d0:	ba 01       	movw	r22, r20
 2d2:	62 2b       	or	r22, r18
 2d4:	65 bb       	out	0x15, r22	; 21
 2d6:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 2d8:	25 b3       	in	r18, 0x15	; 21
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	ac 01       	movw	r20, r24
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_write+0xda>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_write+0xd6>
 2ea:	ba 01       	movw	r22, r20
 2ec:	60 95       	com	r22
 2ee:	62 23       	and	r22, r18
 2f0:	65 bb       	out	0x15, r22	; 21
 2f2:	08 95       	ret
		}
		break;

		case 'd':
		case 'D':
		if(val==1)
 2f4:	41 30       	cpi	r20, 0x01	; 1
 2f6:	69 f4       	brne	.+26     	; 0x312 <DIO_write+0x106>
		{
			SET_BIT(PORTD,pin);
 2f8:	22 b3       	in	r18, 0x12	; 18
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	ac 01       	movw	r20, r24
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_write+0xfa>
 302:	44 0f       	add	r20, r20
 304:	55 1f       	adc	r21, r21
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_write+0xf6>
 30a:	ba 01       	movw	r22, r20
 30c:	62 2b       	or	r22, r18
 30e:	62 bb       	out	0x12, r22	; 18
 310:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 312:	22 b3       	in	r18, 0x12	; 18
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	ac 01       	movw	r20, r24
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_write+0x114>
 31c:	44 0f       	add	r20, r20
 31e:	55 1f       	adc	r21, r21
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_write+0x110>
 324:	ba 01       	movw	r22, r20
 326:	60 95       	com	r22
 328:	62 23       	and	r22, r18
 32a:	62 bb       	out	0x12, r22	; 18
 32c:	08 95       	ret

0000032e <DIO_toggle>:
	}
}

void DIO_toggle(char port,char pin)
{
	  switch(port)
 32e:	84 34       	cpi	r24, 0x44	; 68
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_toggle+0x6>
 332:	3d c0       	rjmp	.+122    	; 0x3ae <DIO_toggle+0x80>
 334:	85 34       	cpi	r24, 0x45	; 69
 336:	40 f4       	brcc	.+16     	; 0x348 <DIO_toggle+0x1a>
 338:	82 34       	cpi	r24, 0x42	; 66
 33a:	f9 f0       	breq	.+62     	; 0x37a <DIO_toggle+0x4c>
 33c:	83 34       	cpi	r24, 0x43	; 67
 33e:	50 f5       	brcc	.+84     	; 0x394 <DIO_toggle+0x66>
 340:	81 34       	cpi	r24, 0x41	; 65
 342:	09 f0       	breq	.+2      	; 0x346 <DIO_toggle+0x18>
 344:	40 c0       	rjmp	.+128    	; 0x3c6 <DIO_toggle+0x98>
 346:	0c c0       	rjmp	.+24     	; 0x360 <DIO_toggle+0x32>
 348:	82 36       	cpi	r24, 0x62	; 98
 34a:	b9 f0       	breq	.+46     	; 0x37a <DIO_toggle+0x4c>
 34c:	83 36       	cpi	r24, 0x63	; 99
 34e:	18 f4       	brcc	.+6      	; 0x356 <DIO_toggle+0x28>
 350:	81 36       	cpi	r24, 0x61	; 97
 352:	c9 f5       	brne	.+114    	; 0x3c6 <DIO_toggle+0x98>
 354:	05 c0       	rjmp	.+10     	; 0x360 <DIO_toggle+0x32>
 356:	83 36       	cpi	r24, 0x63	; 99
 358:	e9 f0       	breq	.+58     	; 0x394 <DIO_toggle+0x66>
 35a:	84 36       	cpi	r24, 0x64	; 100
 35c:	a1 f5       	brne	.+104    	; 0x3c6 <DIO_toggle+0x98>
 35e:	27 c0       	rjmp	.+78     	; 0x3ae <DIO_toggle+0x80>
	  {
		  case 'a':
		  case 'A':
			  TOG_BIT(PORTA,pin);
 360:	2b b3       	in	r18, 0x1b	; 27
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	ac 01       	movw	r20, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_toggle+0x40>
 36a:	44 0f       	add	r20, r20
 36c:	55 1f       	adc	r21, r21
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_toggle+0x3c>
 372:	ba 01       	movw	r22, r20
 374:	62 27       	eor	r22, r18
 376:	6b bb       	out	0x1b, r22	; 27
		  break;
 378:	08 95       	ret

		  case 'b':
		  case 'B':
		     TOG_BIT(PORTB,pin);
 37a:	28 b3       	in	r18, 0x18	; 24
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	ac 01       	movw	r20, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_toggle+0x5a>
 384:	44 0f       	add	r20, r20
 386:	55 1f       	adc	r21, r21
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_toggle+0x56>
 38c:	ba 01       	movw	r22, r20
 38e:	62 27       	eor	r22, r18
 390:	68 bb       	out	0x18, r22	; 24
		  break;
 392:	08 95       	ret

		  case 'C':
		  case 'c':
		    TOG_BIT(PORTC,pin);
 394:	25 b3       	in	r18, 0x15	; 21
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ac 01       	movw	r20, r24
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_toggle+0x74>
 39e:	44 0f       	add	r20, r20
 3a0:	55 1f       	adc	r21, r21
 3a2:	6a 95       	dec	r22
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_toggle+0x70>
 3a6:	ba 01       	movw	r22, r20
 3a8:	62 27       	eor	r22, r18
 3aa:	65 bb       	out	0x15, r22	; 21
		  break;
 3ac:	08 95       	ret

		  case 'd':
		  case 'D':
		    TOG_BIT(PORTD,pin);
 3ae:	22 b3       	in	r18, 0x12	; 18
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	ac 01       	movw	r20, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_toggle+0x8e>
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	6a 95       	dec	r22
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_toggle+0x8a>
 3c0:	ba 01       	movw	r22, r20
 3c2:	62 27       	eor	r22, r18
 3c4:	62 bb       	out	0x12, r22	; 18
 3c6:	08 95       	ret

000003c8 <DIO_read>:
}

char DIO_read(char port,char pin)
{
	char x;
	switch(port)
 3c8:	84 34       	cpi	r24, 0x44	; 68
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_read+0x6>
 3cc:	51 c0       	rjmp	.+162    	; 0x470 <DIO_read+0xa8>
 3ce:	85 34       	cpi	r24, 0x45	; 69
 3d0:	40 f4       	brcc	.+16     	; 0x3e2 <DIO_read+0x1a>
 3d2:	82 34       	cpi	r24, 0x42	; 66
 3d4:	39 f1       	breq	.+78     	; 0x424 <DIO_read+0x5c>
 3d6:	83 34       	cpi	r24, 0x43	; 67
 3d8:	c0 f5       	brcc	.+112    	; 0x44a <DIO_read+0x82>
 3da:	81 34       	cpi	r24, 0x41	; 65
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <DIO_read+0x18>
 3de:	5a c0       	rjmp	.+180    	; 0x494 <DIO_read+0xcc>
 3e0:	0e c0       	rjmp	.+28     	; 0x3fe <DIO_read+0x36>
 3e2:	82 36       	cpi	r24, 0x62	; 98
 3e4:	f9 f0       	breq	.+62     	; 0x424 <DIO_read+0x5c>
 3e6:	83 36       	cpi	r24, 0x63	; 99
 3e8:	20 f4       	brcc	.+8      	; 0x3f2 <DIO_read+0x2a>
 3ea:	81 36       	cpi	r24, 0x61	; 97
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <DIO_read+0x28>
 3ee:	52 c0       	rjmp	.+164    	; 0x494 <DIO_read+0xcc>
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <DIO_read+0x36>
 3f2:	83 36       	cpi	r24, 0x63	; 99
 3f4:	51 f1       	breq	.+84     	; 0x44a <DIO_read+0x82>
 3f6:	84 36       	cpi	r24, 0x64	; 100
 3f8:	09 f0       	breq	.+2      	; 0x3fc <DIO_read+0x34>
 3fa:	4c c0       	rjmp	.+152    	; 0x494 <DIO_read+0xcc>
 3fc:	39 c0       	rjmp	.+114    	; 0x470 <DIO_read+0xa8>
	{
		case 'a':
		case 'A':
			x=READ_BIT(PINA,pin);
 3fe:	29 b3       	in	r18, 0x19	; 25
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	06 2e       	mov	r0, r22
 406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_read+0x44>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <DIO_read+0x40>
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	82 23       	and	r24, r18
 414:	93 23       	and	r25, r19
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_read+0x54>
 418:	95 95       	asr	r25
 41a:	87 95       	ror	r24
 41c:	6a 95       	dec	r22
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_read+0x50>
 420:	98 2f       	mov	r25, r24
		break;
 422:	38 c0       	rjmp	.+112    	; 0x494 <DIO_read+0xcc>

		case 'b':
		case 'B':
			x=READ_BIT(PINB,pin);
 424:	26 b3       	in	r18, 0x16	; 22
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	06 2e       	mov	r0, r22
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_read+0x6a>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_read+0x66>
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	82 23       	and	r24, r18
 43a:	93 23       	and	r25, r19
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_read+0x7a>
 43e:	95 95       	asr	r25
 440:	87 95       	ror	r24
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_read+0x76>
 446:	98 2f       	mov	r25, r24
		break;
 448:	25 c0       	rjmp	.+74     	; 0x494 <DIO_read+0xcc>

		case 'C':
		case 'c':
			x=READ_BIT(PINC,pin);	
 44a:	23 b3       	in	r18, 0x13	; 19
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	06 2e       	mov	r0, r22
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_read+0x90>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_read+0x8c>
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	82 23       	and	r24, r18
 460:	93 23       	and	r25, r19
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_read+0xa0>
 464:	95 95       	asr	r25
 466:	87 95       	ror	r24
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_read+0x9c>
 46c:	98 2f       	mov	r25, r24
		break;
 46e:	12 c0       	rjmp	.+36     	; 0x494 <DIO_read+0xcc>

		case 'd':
		case 'D':
			x=READ_BIT(PIND,pin);
 470:	20 b3       	in	r18, 0x10	; 16
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	06 2e       	mov	r0, r22
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_read+0xb6>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_read+0xb2>
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	82 23       	and	r24, r18
 486:	93 23       	and	r25, r19
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_read+0xc6>
 48a:	95 95       	asr	r25
 48c:	87 95       	ror	r24
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_read+0xc2>
 492:	98 2f       	mov	r25, r24
		break;
	}
return x;
}
 494:	89 2f       	mov	r24, r25
 496:	08 95       	ret

00000498 <dio_connet_pullup>:
void dio_connet_pullup(char port,char pin, char connect)
{
	DIO_write(port,pin,connect);
 498:	0e 94 06 01 	call	0x20c	; 0x20c <DIO_write>
 49c:	08 95       	ret

0000049e <led_init>:
 */ 

#include "DIO.h"
void led_init(char port ,char pin)
{
	set_pin_dir(port,pin,1);
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	0e 94 75 00 	call	0xea	; 0xea <set_pin_dir>
}
 4a4:	08 95       	ret

000004a6 <led_on>:
void led_on(char port,char pin)
{
	DIO_write(port,pin,1);
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	0e 94 06 01 	call	0x20c	; 0x20c <DIO_write>
}
 4ac:	08 95       	ret

000004ae <led_off>:
void led_off(char port,char pin )
{
	DIO_write(port,pin,0);
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	0e 94 06 01 	call	0x20c	; 0x20c <DIO_write>
}
 4b4:	08 95       	ret

000004b6 <led_toggle>:
void led_toggle(char port ,char pin)
{
	DIO_toggle(port,pin);
 4b6:	0e 94 97 01 	call	0x32e	; 0x32e <DIO_toggle>
}
 4ba:	08 95       	ret

000004bc <LED_status>:
char LED_status(char port, char pin )
{
	return DIO_read(port ,pin);
 4bc:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_read>
}
 4c0:	08 95       	ret

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
